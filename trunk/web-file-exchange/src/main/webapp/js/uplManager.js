// encoding: UTF-8

/**
 * The Manager is a static class or a singleton here.
 * It creates and controls Workers to upload multiple files simultaneously.
 * The uploads are restricted by the managers maxSimultaneousTransfers
 * value. (On server, too.)
 * 
 * The uploadQueue will back the currently running worker instances.
 * The id's used by the workers and their elements are generated by the
 * Manager.
 * 
 * The Manager also provides the "upl.Manager.uploadUrl" variable,
 * shared among the worker's forms.
 * 
 * the most important parts of the manager are:
 *  . uploadQueue - where the workers are waiting for upload
 *  . formWrapper - where the worker's form is mounted to DOM
 *  . fileList    - the list where the worker's status is displayed
 *  . uploadUrl   - the target for uploads (UploadServlet)
 *     
 */


if ( ! this.upl) {
    this.upl = {};
}
if ( ! this.upl.Manager) {
    this.upl.Manager = {};
}


/**
 * initialize the upload manager:
 * 1) validate arguments
 * 2) initialize the dom elements 'formWrapper' and 'fileList'
 * 3) create the first upload worker instance
 */
upl.Manager.setUp = function(attrs) {
    if (attrs.formWrapper == null || typeof(attrs.formWrapper) !== 'object')
        throw 'element formWrapper is mandatory!';
    if (attrs.fileList == null || typeof(attrs.fileList) !== 'object')
        throw 'element fileList is mandatory!';
    if (attrs.uploadUrl == null || typeof(attrs.uploadUrl) !== 'string')
        throw 'uploadUrl must be a string!';
    if (attrs.maxSimultaneousTransfers != null 
                  && typeof(attrs.maxSimultaneousTransfers) !== 'number')
        throw 'maxSimultaneousTransfers must be a number!';
    
    upl.Manager.uploadQueue = []; // list of the Worker instances
    upl.Manager.formWrapper = attrs.formWrapper;
    upl.Manager.fileList = attrs.fileList;
    upl.Manager.uploadUrl = attrs.uploadUrl;

    if (attrs.maxSimultaneousTransfers != null) {
        upl.Manager.maxSimultaneousTransfers = attrs.maxSimultaneousTransfers;
    } else {
        upl.Manager.maxSimultaneousTransfers = 2;
    }
    
    // insert first worker:
    upl.Manager.insertNewWorker();
};

/** when a upload starts transferring, the file-item will be added to the list*/
upl.Manager.addFileToList = function(listItem) {
    upl.Manager.fileList.appendChild(listItem);
}

upl.Manager.getNextWorkerId = function() {
    return upl.Manager.uploadQueue.length;  // unique enough :D
}

/** insert a new uploader instance for next upload */
upl.Manager.insertNewWorker = function() {
    var worker = new upl.Worker();
    upl.Manager.formWrapper.appendChild(worker.form);
    upl.Manager.formWrapper.appendChild(worker.hiddenIframe);
    upl.Manager.uploadQueue.push(worker);
}

/** free resources after worker has finished upload */
upl.Manager.removeOldWorker = function(id) {
    upl.Manager.uploadQueue[id] = null;
}

/** starts the next upload in the queue. */
upl.Manager.startNextDownload = function() {
    for (var i = 0; i < upl.Manager.uploadQueue.length; ++i) {
        var u = upl.Manager.uploadQueue[i];
        if (u != null && u.mayStartUploading()) {
            u.upload(false);
            return;
        }
    }
};

/** answers if an upload slot is available */
upl.Manager.isUploadSlotAvailable = function() {
    var runningUploads = 0;
    
    for (var i = 0; i < upl.Manager.uploadQueue.length; ++i) {
        var worker = upl.Manager.uploadQueue[i];
        if (worker != null && worker.uplodadRunning) {
            runningUploads++;
        }
    }
    
    return runningUploads < upl.Manager.maxSimultaneousTransfers;
};
