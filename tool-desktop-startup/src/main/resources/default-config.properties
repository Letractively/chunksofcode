



# the offset to be added to the position of the window (X,Y,WIDTH,HEIGHT)
# this might help to adjust the window position when you change panels etc.
global.coordinates.offset = 0,0,0,0


# someone could add another implementation, e.g. another linux, ms windows, etc.
# so configure it here:
global.windowmanager.implementation = com.myapp.tool.gnomestart.programstate.impl.linux.WmctrlWinStateMgr
global.processmanager.implementation = com.myapp.tool.gnomestart.programstate.impl.linux.LinuxProcStateMgr


# defines how frequent we are polling "ps" and "wmctrl" output
global.statuscheck.interval.millis = 500
global.stdout.log.pattern = %-7level | %-8thread | %d{yyyy-MM-dd HH:mm:ss.SSS} | %-70.70(%class{40}:%line.%method{20}\\(\\)) | %msg%n
global.stdout.log.level = ALL

# GUI settings
global.gui.show = true
global.gui.title = Custom Desktop Startup
global.gui.waitforpreconditions = true
global.gui.height = 400
global.gui.width = 900
global.gui.waitbeforequit = 5000
# pattern doc: http://logback.qos.ch/manual/layouts.html
global.gui.log.pattern = %d{yy/MM/dd HH:mm} | %-5level | %-46.46(%class{25}[%line].%method{15}\\(\\)) | %msg%n
global.gui.log.level = DEBUG


# the items that must be started before we begin starting
# our items. this is useful if we want to wait for the gnome panel
# was started for example.
# specify a comma-separated list of the items:
#preconditionitems = gnomedesktop,gnomeupperpanel,gnomelowerpanel
preconditionitems = xfce4desktop

#gnomedesktop.visibleregex = (?i)desktop
#gnomeupperpanel.visibleregex = (?i)(Oberes Kanten-Panel|Top Expanded Edge Panel)
#gnomelowerpanel.visibleregex = (?i)(Unteres Kanten-Panel|Bottom Expanded Edge Panel)

xfce4desktop.visibleregex = (?i)desktop


# the items that will be started after the precondition was satisfied
# specify a comma-separated list of the items:
#startitems = item1,item2,nasenItem,foo-bar
startitems = exampleStartItem




#################################
# USE THIS AS TEMPLATE FOR NEW ITEMS:
#
# brief introduction:
#
#   STARTITEMS
#
#   Those are the items we want to start. Therefore the startCommand is mandatory.
#
#   *  If the startItem has a startRegex, we will wait for the 
#        process matching the regex.
#   *  If the startItem has a visibleRegex, we will wait for a window which 
#        title matches the regex.
#   *  If the startItem has coordinates, its window will be moved to the 
#        given position and resized to the dimension.
#        (This requires a visibleRegex, because we need to recognize the 
#        window of the startItem.)
#   *  If the startItem has a desktop, its window will be moved to the desktop.
#        (This requires a visibleRegex, because we need to recognize the 
#        window of the startItem.)
#
#   PRECONDITION ITEMS
#
#   Those are the items we are waiting for before starting the start-items,
#   e.g. the gnome-panel, or other applications that are started by
#   another autostart mechanism.
#
#   *  If the preconditionItem has a startCommand, an error will be raised.
#   *  The startRegex, visibleRegex, coordinates and desktop
#      properties are treated the same way as an startItem.
#
# the dimension and position of the window (X,Y,WIDTH,HEIGHT)
# where the upper left angle of the window is placed:
exampleStartItem.coords = 100,200,200,400

# the index of the desktop, zero-based:
exampleStartItem.desktop = 0

# the shell command that starts the program:
exampleStartItem.startcommand = xclock

# the optional java regex to check if the program is started:
# (parsing 'ps auxwww' output)
exampleStartItem.startregex = xclock

# the optional java regex to test whether the window of the program
# is visible: (parsing window titles)
exampleStartItem.visibleregex = (?i)xclock
#
#################################
